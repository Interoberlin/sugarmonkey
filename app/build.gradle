apply plugin: 'com.android.application'
apply plugin: 'maven'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "de.interoberlin." + artifactId
        minSdkVersion 15
        targetSdkVersion 19
        versionCode 1
        versionName versionMajor + "." + versionMinor + "." + versionPatch
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def apkFile = file('build/outputs/apk/app-release-unsigned.apk')
def apkTargetName =  artifactId + '-' + versionMajor + '.' + versionMinor + '.' + versionPatch

artifacts {
    archives apkFile
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
            pom.groupId = 'de.interoberlin'
            pom.artifactId = artifactId
            pom.version = versionMajor + '.' + versionMinor + '.' + versionPatch
        }
    }
}

task publishFdroid(dependsOn: 'copy') {
    println 'TO BE DONE'
}

task copy(type: Copy) {
    println 'FROM build/outputs/apk/app-release-unsigned.apk'
    println 'TO ' + System.getenv("FDROID_REPO")

    from 'build/outputs/apk/app-release-unsigned.apk'
    into System.getenv("FDROID_REPO")

    rename { String fileName ->
        fileName.replace('app-release-unsigned', apkTargetName)
    }
}

task tidy(type: Delete) {
    println 'DELETE ' + System.getenv("FDROID_REPO") + '/' + apkTargetName
    delete System.getenv("FDROID_REPO") + '/' + apkTargetName + '.apk'
}

copy.dependsOn tidy

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'de.interoberlin:sauvignon:0.1.0@aar'
}
